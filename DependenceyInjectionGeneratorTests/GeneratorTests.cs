using Shouldly;
using Xunit.Abstractions;

namespace DependenceyInjectionGeneratorTests
{
    public class GeneratorTests : BaseTest
    {
        public GeneratorTests(ITestOutputHelper output) : base(output, OutputKind.DynamicallyLinkedLibrary) { }

        [Fact]
        public void NoCallToAddServicesGeneratesNoExtensionMethod()
        {
            var source = @"namespace SourceGeneratorWeb { }";
            var trees = GetAllGeneratedOutput(source);
            trees.Count.ShouldBe(2);
            var attributeCode = trees[1];
            attributeCode.ShouldNotBeNull();

            const string expectedAttributeCode = @"// <auto-generated />
[System.AttributeUsage(System.AttributeTargets.Class, AllowMultiple = false, Inherited = false)]
internal class AddServiceAttribute : System.Attribute
{
}
";
            attributeCode.ShouldBe(expectedAttributeCode);
        }

        [Fact]
        public void GeneratedCodeWithoutServicesWork()
        {
            var source = @"
using Microsoft.Extensions.DependencyInjection;
namespace SourceGeneratorWeb
{
    class C
    {
        void M(IServiceCollection services)
        {
            services.AddServicesToDI();
        }
    }
}";
            var (attributeCode, extensionCode) = GetGeneratedOutput(source);
            attributeCode.ShouldNotBeNull();
            extensionCode.ShouldNotBeNull();

            const string expectedAttributeCode = @"// <auto-generated />
[System.AttributeUsage(System.AttributeTargets.Class, AllowMultiple = false, Inherited = false)]
internal class AddServiceAttribute : System.Attribute
{
}
";
            const string expectedExtensionCode = @"// <auto-generated />
using Microsoft.Extensions.DependencyInjection;

namespace SourceGeneratorWeb
{
    public static class GeneratedServicesExtension
    {
        public static void AddServicesToDI(this IServiceCollection services)
        {
        }
    }
}
";
            attributeCode.ShouldBe(expectedAttributeCode);
            extensionCode.ShouldBe(expectedExtensionCode);
        }

        [Fact]
        public void GeneratedCodeWithOneService()
        {
            var source = @"
using Microsoft.Extensions.DependencyInjection;
namespace SourceGeneratorWeb
{
    class C
    {
        void M(IServiceCollection services)
        {
             services.AddServicesToDI();
        }
    }
    [AddService]
    class MyService
    {
    }
}";
            var (_, extensionCode) = GetGeneratedOutput(source);
            extensionCode.ShouldNotBeNull();

            const string expectedExtensionCode = @"// <auto-generated />
using Microsoft.Extensions.DependencyInjection;

namespace SourceGeneratorWeb
{
    public static class GeneratedServicesExtension
    {
        public static void AddServicesToDI(this IServiceCollection services)
        {
            services.AddScoped<SourceGeneratorWeb.MyService>();
        }
    }
}
";
            extensionCode.ShouldBe(expectedExtensionCode);
        }

        [Fact]
        public void GeneratedCodeWithTwoServices()
        {
            var source = @"
using Microsoft.Extensions.DependencyInjection;
namespace SourceGeneratorWeb
{
    class C
    {
        void M(IServiceCollection services)
        {
             services.AddServicesToDI();
        }
    }
    [AddService]
    class MyService1
    {
    }
    [AddService]
    class MyService2
    {
    }
}";
            var (_, extensionCode) = GetGeneratedOutput(source);
            extensionCode.ShouldNotBeNull();

            const string expectedExtensionCode = @"// <auto-generated />
using Microsoft.Extensions.DependencyInjection;

namespace SourceGeneratorWeb
{
    public static class GeneratedServicesExtension
    {
        public static void AddServicesToDI(this IServiceCollection services)
        {
            services.AddScoped<SourceGeneratorWeb.MyService1>();
            services.AddScoped<SourceGeneratorWeb.MyService2>();
        }
    }
}
";
            extensionCode.ShouldBe(expectedExtensionCode);
        }

        [Fact]
        public void GeneratedCodeWithDifferentNamespace()
        {
            var source = @"
using Microsoft.Extensions.DependencyInjection;
namespace MyNamespace
{
    class C
    {
        void M(IServiceCollection services)
        {
             services.AddServicesToDI();
        }
    }
    [AddService]
    class MyService
    {
    }
}";
            var (_, extensionCode) = GetGeneratedOutput(source);
            extensionCode.ShouldNotBeNull();

            const string expectedExtensionCode = @"// <auto-generated />
using Microsoft.Extensions.DependencyInjection;

namespace MyNamespace
{
    public static class GeneratedServicesExtension
    {
        public static void AddServicesToDI(this IServiceCollection services)
        {
            services.AddScoped<MyNamespace.MyService>();
        }
    }
}
";
            expectedExtensionCode.ShouldBe(extensionCode);
        }

        [Fact]
        public void GeneratedCodeWithoutNamespace()
        {
            var source = @"
using Microsoft.Extensions.DependencyInjection;
class C
{
    void M(IServiceCollection services)
    {
         services.AddServicesToDI();
    }
}
[AddService]
class MyService
{
}";
            var (_, extensionCode) = GetGeneratedOutput(source);
            extensionCode.ShouldNotBeNull();

            const string expectedExtensionCode = @"// <auto-generated />
using Microsoft.Extensions.DependencyInjection;

public static class GeneratedServicesExtension
{
    public static void AddServicesToDI(this IServiceCollection services)
    {
        services.AddScoped<MyService>();
    }
}
";
            extensionCode.ShouldBe(expectedExtensionCode);
        }
    }
}
